import asyncio
import random
import time
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
import aiosqlite

TOKEN = "7558760680:AAHhhuACxlLgfkOwskeA5B9dzZ4GZp2uk8c"
CHANNEL_USERNAME = "@economicbotlive"
ADMIN_IDS = [6505085514]
DB_NAME = "bot.db"

bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üé∞ –ö–∞–∑–∏–Ω–æ"), KeyboardButton("üéÅ –†—É–ª–µ—Ç–∫–∞")],
    [KeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω"), KeyboardButton("üíº –†–∞–±–æ—Ç–∞"), KeyboardButton("üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å")],
    [KeyboardButton("üëë –¢–û–ü"), KeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")]
])

subscribe_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/economicbotlive")],
    [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
async def init_db():
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("""CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            balance INTEGER DEFAULT 0,
            vip INTEGER DEFAULT 0,
            mod INTEGER DEFAULT 0,
            referrer INTEGER,
            referrals INTEGER DEFAULT 0,
            last_daily INTEGER DEFAULT 0
        )""")
        await db.execute("""CREATE TABLE IF NOT EXISTS items (
            user_id INTEGER,
            item_name TEXT,
            amount INTEGER
        )""")
        await db.execute("""CREATE TABLE IF NOT EXISTS promo_codes (
            code TEXT PRIMARY KEY,
            reward INTEGER
        )""")
        await db.commit()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_subscription(user_id):
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False

# –°—Ç–∞—Ä—Ç
@dp.message(F.text == "/start")
async def start_handler(msg: Message):
    user_id = msg.from_user.id
    async with aiosqlite.connect(DB_NAME) as db:
        result = await db.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user = await result.fetchone()
        if not user:
            args = msg.text.split()
            referrer = int(args[1]) if len(args) > 1 and args[1].isdigit() else None
            await db.execute("INSERT INTO users (user_id, referrer) VALUES (?, ?)", (user_id, referrer))
            if referrer:
                await db.execute("UPDATE users SET referrals = referrals + 1 WHERE user_id = ?", (referrer,))
            await db.commit()

    if not await check_subscription(user_id):
        await msg.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:", reply_markup=subscribe_kb)
        return

    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É!", reply_markup=main_kb)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø–æ –∫–Ω–æ–ø–∫–µ)
@dp.callback_query(F.data == "check_sub")
async def verify_subscription(callback: types.CallbackQuery):
    if await check_subscription(callback.from_user.id):
        await callback.message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        await callback.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_kb)
    else:
        await callback.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", show_alert=True)

# –ë–∞–ª–∞–Ω—Å
@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def balance_handler(msg: Message):
    user_id = msg.from_user.id
    async with aiosqlite.connect(DB_NAME) as db:
        res = await db.execute("SELECT balance, vip, mod FROM users WHERE user_id = ?", (user_id,))
        user = await res.fetchone()
        if user:
            balance, vip, mod = user
            status = "–û–±—ã—á–Ω—ã–π"
            if vip:
                status = "VIP"
            if mod:
                status = "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
            await msg.answer(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\nüè∑ –°—Ç–∞—Ç—É—Å: {status}")
        else:
            await msg.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start")

# –†—É–ª–µ—Ç–∫–∞
@dp.message(F.text == "üéÅ –†—É–ª–µ—Ç–∫–∞")
async def roulette_handler(msg: Message):
    user_id = msg.from_user.id
    now = int(time.time())
    async with aiosqlite.connect(DB_NAME) as db:
        res = await db.execute("SELECT last_daily FROM users WHERE user_id = ?", (user_id,))
        last = (await res.fetchone())[0]
        if now - last < 86400:
            remain = 86400 - (now - last)
            hours = remain // 3600
            minutes = (remain % 3600) // 60
            await msg.answer(f"‚è≥ –£–∂–µ –∫—Ä—É—Ç–∏–ª–∏ —Ä—É–ª–µ—Ç–∫—É. –ñ–¥–∏—Ç–µ {hours} —á. {minutes} –º–∏–Ω.")
            return
        amount = random.choices([0, 500, 1000, 2500, 5000], weights=[50, 25, 15, 8, 2])[0]
        await db.execute("UPDATE users SET balance = balance + ?, last_daily = ? WHERE user_id = ?", (amount, now, user_id))
        await db.commit()
        await msg.answer(f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {amount} –º–æ–Ω–µ—Ç!")

# –ö–∞–∑–∏–Ω–æ
@dp.message(F.text == "üé∞ –ö–∞–∑–∏–Ω–æ")
async def casino_handler(msg: Message):
    user_id = msg.from_user.id
    async with aiosqlite.connect(DB_NAME) as db:
        res = await db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        balance = (await res.fetchone())[0]
        if balance >= 100:
            win = random.random() < 0.25
            delta = 1000 if win else -100
            await db.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (delta, user_id))
            await db.commit()
            text = "üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 1000 –º–æ–Ω–µ—Ç!" if win else "üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 100 –º–æ–Ω–µ—Ç."
            await msg.answer(text)
        else:
            await msg.answer("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–Ω–µ—Ç (–Ω—É–∂–Ω–æ 100+)")

# –ü—Ä–æ–º–æ–∫–æ–¥—ã
@dp.message(F.text.startswith("–ü–†–û–ú–û"))
async def promo_handler(msg: Message):
    code = msg.text.split("–ü–†–û–ú–û")[1].strip()
    user_id = msg.from_user.id
    async with aiosqlite.connect(DB_NAME) as db:
        res = await db.execute("SELECT reward FROM promo_codes WHERE code = ?", (code,))
        promo = await res.fetchone()
        if promo:
            await db.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (promo[0], user_id))
            await db.execute("DELETE FROM promo_codes WHERE code = ?", (code,))
            await db.commit()
            await msg.answer(f"üéÅ –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –ø–æ–ª—É—á–∏–ª–∏ {promo[0]} –º–æ–Ω–µ—Ç!")
        else:
            await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
@dp.message(F.text.startswith("/addpromo"))
async def add_promo(msg: Message):
    if msg.from_user.id not in ADMIN_IDS:
        return await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
    try:
        _, code, reward = msg.text.split()
        reward = int(reward)
        async with aiosqlite.connect(DB_NAME) as db:
            await db.execute("INSERT INTO promo_codes (code, reward) VALUES (?, ?)", (code, reward))
            await db.commit()
            await msg.answer("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω.")
    except:
        await msg.answer("–ü—Ä–∏–º–µ—Ä: /addpromo –ö–û–î 500")

# –ó–∞–ø—É—Å–∫
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())



