import asyncio
import logging
import random
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

TOKEN = "7558760680:AAHhhuACxlLgfkOwskeA5B9dzZ4GZp2uk8c"

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)

DB_NAME = "economy.db"

async def init_db():
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute('''CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            balance INTEGER DEFAULT 0,
            inventory TEXT DEFAULT '',
            last_spin INTEGER DEFAULT 0
        )''')
        await db.commit()

@dp.message_handler(commands=["start"])
async def start(msg: types.Message):
    user_id = msg.from_user.id
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
        await db.commit()
    await msg.answer("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É! –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

@dp.message_handler(commands=["help"])
async def help(msg: types.Message):
    await msg.answer("""
–ö–æ–º–∞–Ω–¥—ã:
üí∞ /balance ‚Äî –±–∞–ª–∞–Ω—Å
üéÅ /daily ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞
üé≤ /casino ‚Äî –∫–∞–∑–∏–Ω–æ
ü™ô /coin ‚Äî –æ—Ä—ë–ª –∏ —Ä–µ—à–∫–∞
üõí /shop ‚Äî –º–∞–≥–∞–∑–∏–Ω
üéí /inventory ‚Äî –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
üíé /vip ‚Äî –∫—É–ø–∏—Ç—å VIP (200000 –º–æ–Ω–µ—Ç)
üõ° /mod ‚Äî –∫—É–ø–∏—Ç—å –º–æ–¥–µ—Ä–∫—É (10000000 –º–æ–Ω–µ—Ç)
""")

@dp.message_handler(commands=["balance"])
async def balance(msg: types.Message):
    user_id = msg.from_user.id
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,)) as c:
            row = await c.fetchone()
            await msg.answer(f"üí∞ –ë–∞–ª–∞–Ω—Å: {row[0]} –º–æ–Ω–µ—Ç")

@dp.message_handler(commands=["daily"])
async def daily(msg: types.Message):
    import time
    user_id = msg.from_user.id
    now = int(time.time())
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute("SELECT last_spin FROM users WHERE user_id = ?", (user_id,)) as c:
            row = await c.fetchone()
            if now - row[0] < 86400:
                await msg.answer("‚è≥ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª —Ä—É–ª–µ—Ç–∫—É —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
                return
        reward = random.randint(100, 5000)
        await db.execute("UPDATE users SET balance = balance + ?, last_spin = ? WHERE user_id = ?", (reward, now, user_id))
        await db.commit()
        await msg.answer(f"üéÅ –¢—ã –ø–æ–ª—É—á–∏–ª {reward} –º–æ–Ω–µ—Ç!")

@dp.message_handler(commands=["casino"])
async def casino(msg: types.Message):
    user_id = msg.from_user.id
    win = random.choice([True, False])
    amount = random.randint(100, 10000)
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,)) as c:
            bal = (await c.fetchone())[0]
        if bal < amount:
            await msg.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –∫–∞–∑–∏–Ω–æ.")
            return
        if win:
            await db.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
            await msg.answer(f"üéâ –¢—ã –≤—ã–∏–≥—Ä–∞–ª {amount} –º–æ–Ω–µ—Ç!")
        else:
            await db.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (amount, user_id))
            await msg.answer(f"üò¢ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª {amount} –º–æ–Ω–µ—Ç.")
        await db.commit()

@dp.message_handler(commands=["coin"])
async def coin(msg: types.Message):
    user_id = msg.from_user.id
    choice = random.choice(["–û—Ä—ë–ª", "–†–µ—à–∫–∞"])
    reward = random.randint(500, 1500)
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (reward, user_id))
        await db.commit()
    await msg.answer(f"ü™ô –í—ã–ø–∞–ª {choice}! –¢—ã –ø–æ–ª—É—á–∏–ª {reward} –º–æ–Ω–µ—Ç!")

items = [
    ("–ö–æ—Ç –≤ —à–ª—è–ø–µ", 1000),
    ("–°—É–ø–µ—Ä —Ç–∞–ø–∫–∏", 2500),
    ("–ü–µ–ª—å–º–µ–Ω–∏", 500),
    ("–ì–∞—Ä–º–æ–Ω–∏—è", 3000),
    ("–°—Ç–∏–∫–µ—Ä–±–æ–º–±", 4000),
    ("–¢–æ—Å—Ç–µ—Ä", 1500),
    ("–ö–µ–ø–∫–∞", 1800),
    ("–ö—Ä—É—Ç–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞", 3000),
    ("–ö–∞—Ä–∞–Ω–¥–∞—à", 800),
    ("–†—É—á–∫–∞", 900),
]

@dp.message_handler(commands=["shop"])
async def shop(msg: types.Message):
    text = "üõí –ú–∞–≥–∞–∑–∏–Ω:\n"
    for i, (name, price) in enumerate(items, 1):
        text += f"{i}. {name} ‚Äî {price} –º–æ–Ω–µ—Ç\n"
    text += "\n–ö—É–ø–∏—Ç—å: /buy <–Ω–æ–º–µ—Ä>"
    await msg.answer(text)

@dp.message_handler(lambda m: m.text.startswith("/buy"))
async def buy(msg: types.Message):
    parts = msg.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        await msg.answer("‚ùå –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: /buy 1")
        return
    index = int(parts[1]) - 1
    if index < 0 or index >= len(items):
        await msg.answer("‚ùå –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞.")
        return
    item_name, price = items[index]
    user_id = msg.from_user.id
    async with aiosqlite.connect(DB_NAME) as db:
        cur = await db.execute("SELECT balance, inventory FROM users WHERE user_id = ?", (user_id,))
        bal, inv = await cur.fetchone()
        if bal < price:
            await msg.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
            return
        new_inv = inv + f"{item_name}," if inv else f"{item_name},"
        await db.execute("UPDATE users SET balance = balance - ?, inventory = ? WHERE user_id = ?", (price, new_inv, user_id))
        await db.commit()
        await msg.answer(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞: {item_name}")

@dp.message_handler(commands=["inventory"])
async def inventory(msg: types.Message):
    user_id = msg.from_user.id
    async with aiosqlite.connect(DB_NAME) as db:
        cur = await db.execute("SELECT inventory FROM users WHERE user_id = ?", (user_id,))
        row = await cur.fetchone()
        if not row or not row[0]:
            await msg.answer("üéí –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.")
        else:
            inv = row[0].split(",")[:-1]
            await msg.answer("üéí –¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n" + "\n".join(f"- {x}" for x in inv))

@dp.message_handler(commands=["vip"])
async def vip(msg: types.Message):
    user_id = msg.from_user.id
    cost = 200000
    async with aiosqlite.connect(DB_NAME) as db:
        cur = await db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        bal = (await cur.fetchone())[0]
        if bal < cost:
            await msg.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ VIP.")
        else:
            await db.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (cost, user_id))
            await db.commit()
            await msg.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã —Å—Ç–∞–ª VIP!")

@dp.message_handler(commands=["mod"])
async def mod(msg: types.Message):
    user_id = msg.from_user.id
    cost = 10000000
    async with aiosqlite.connect(DB_NAME) as db:
        cur = await db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        bal = (await cur.fetchone())[0]
        if bal < cost:
            await msg.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –º–æ–¥–µ—Ä–∞.")
        else:
            await db.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (cost, user_id))
            await db.commit()
            await msg.answer("üõ° –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!")

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.get_event_loop().run_until_complete(init_db())
    executor.start_polling(dp, skip_updates=True)


