import asyncio
import logging
import random
import aiosqlite
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder

TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù"

bot = Bot(token=TOKEN)
dp = Dispatcher()

DATABASE = "users.db"


async def init_db():
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                balance INTEGER DEFAULT 1000,
                vip INTEGER DEFAULT 0,
                admin INTEGER DEFAULT 0
            )
        """)
        await db.commit()


@dp.message(Command("start"))
async def start(message: Message):
    await register_user(message.from_user.id)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ-–±–æ—Ç!")


async def register_user(user_id: int):
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
        await db.commit()


async def get_user(user_id):
    async with aiosqlite.connect(DATABASE) as db:
        cursor = await db.execute("SELECT balance, vip, admin FROM users WHERE user_id = ?", (user_id,))
        return await cursor.fetchone()


@dp.message(Command("balance"))
async def balance(message: Message):
    balance, vip, admin = await get_user(message.from_user.id)
    status = []
    if vip:
        status.append("üåü VIP")
    if admin:
        status.append("üõ† –ê–¥–º–∏–Ω")
    status_text = ", ".join(status) if status else "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    await message.answer(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n–°—Ç–∞—Ç—É—Å: {status_text}")


@dp.message(Command("roulette"))
async def roulette(message: Message):
    user_id = message.from_user.id
    balance, *_ = await get_user(user_id)
    if balance < 100:
        return await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –∏–≥—Ä—ã. –ù—É–∂–Ω–∞ —Ö–æ—Ç—è –±—ã 100 –º–æ–Ω–µ—Ç.")

    result = random.choice(["üî¥", "‚ö´", "üü¢"])
    win = result == "üü¢"
    new_balance = balance + 500 if win else balance - 100

    async with aiosqlite.connect(DATABASE) as db:
        await db.execute("UPDATE users SET balance = ? WHERE user_id = ?", (new_balance, user_id))
        await db.commit()

    if win:
        await message.answer(f"{result} –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 500 –º–æ–Ω–µ—Ç!")
    else:
        await message.answer(f"{result} –£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 100 –º–æ–Ω–µ—Ç.")


@dp.message(Command("buy_vip"))
async def buy_vip(message: Message):
    user_id = message.from_user.id
    balance, vip, _ = await get_user(user_id)
    if vip:
        return await message.answer("‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å VIP-—Å—Ç–∞—Ç—É—Å.")
    if balance < 100000:
        return await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –¢—Ä–µ–±—É–µ—Ç—Å—è 100000 –º–æ–Ω–µ—Ç.")

    async with aiosqlite.connect(DATABASE) as db:
        await db.execute("UPDATE users SET vip = 1, balance = balance - 100000 WHERE user_id = ?", (user_id,))
        await db.commit()
    await message.answer("üåü –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ VIP-—Å—Ç–∞—Ç—É—Å!")


@dp.message(Command("buy_admin"))
async def buy_admin(message: Message):
    user_id = message.from_user.id
    balance, _, admin = await get_user(user_id)
    if admin:
        return await message.answer("‚úÖ –í—ã —É–∂–µ –∞–¥–º–∏–Ω.")
    if balance < 100000000:
        return await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –¢—Ä–µ–±—É–µ—Ç—Å—è 100000000 –º–æ–Ω–µ—Ç.")

    async with aiosqlite.connect(DATABASE) as db:
        await db.execute("UPDATE users SET admin = 1, balance = balance - 100000000 WHERE user_id = ?", (user_id,))
        await db.commit()
    await message.answer("üõ† –í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–æ–º!")


async def main():
    await init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())



