import asyncio
import random
import time
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest

TOKEN = "7558760680:AAHhhuACxlLgfkOwskeA5B9dzZ4GZp2uk8c"
ADMIN_IDS = [6505085514]
CHANNEL_USERNAME = "@economicbotlive"

bot = Bot(token=TOKEN)
dp = Dispatcher()
DB_NAME = "bot.db"

# --- –ö–Ω–æ–ø–∫–∏ ---
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("\U0001F4B0 –ë–∞–ª–∞–Ω—Å", "\U0001F3B0 –ö–∞–∑–∏–Ω–æ", "\U0001F4B8 –†—É–ª–µ—Ç–∫–∞")
main_kb.add("\U0001F6D2 –ú–∞–≥–∞–∑–∏–Ω", "\U0001F4BC –†–∞–±–æ—Ç–∞", "\U0001F4E6 –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å")
main_kb.add("\U0001F451 –¢–û–ü", "\U0001F465 –†–µ—Ñ–µ—Ä–∞–ª—ã", "\U0001F381 –ü—Ä–æ–º–æ–∫–æ–¥")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
async def init_db():
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                balance INTEGER DEFAULT 0,
                vip INTEGER DEFAULT 0,
                mod INTEGER DEFAULT 0,
                referrer INTEGER,
                referrals INTEGER DEFAULT 0,
                last_daily INTEGER DEFAULT 0
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS items (
                user_id INTEGER,
                item_name TEXT,
                amount INTEGER
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS promo (
                code TEXT PRIMARY KEY,
                amount INTEGER,
                activated INTEGER DEFAULT 0
            )
        """)
        await db.commit()

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
async def check_subscription(user_id):
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ["member", "creator", "administrator"]
    except TelegramBadRequest:
        return False

# --- –°—Ç–∞—Ä—Ç ---
@dp.message(Command("start"))
async def start_cmd(msg: types.Message):
    user_id = msg.from_user.id

    if not await check_subscription(user_id):
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME.strip('@')}")],
            [types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="check_sub")]
        ])
        await msg.answer("‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª:", reply_markup=kb)
        return

    async with aiosqlite.connect(DB_NAME) as db:
        user = await db.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        if not await user.fetchone():
            await db.execute("INSERT INTO users (user_id) VALUES (?)", (user_id,))
            await db.commit()
    await msg.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É!", reply_markup=main_kb)

# --- –ü—Ä–æ–º–æ–∫–æ–¥ ---
@dp.message(lambda m: m.text == "\U0001F381 –ü—Ä–æ–º–æ–∫–æ–¥")
async def promo_input(msg: types.Message):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")

@dp.message(lambda m: m.text.startswith("!–ø—Ä–æ–º–æ ") and m.from_user.id in ADMIN_IDS)
async def create_promo(msg: types.Message):
    try:
        _, code, amount = msg.text.split()
        amount = int(amount)
    except:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: !–ø—Ä–æ–º–æ <–ö–û–î> <–°–£–ú–ú–ê>")
        return

    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("INSERT OR IGNORE INTO promo (code, amount) VALUES (?, ?)", (code.upper(), amount))
        await db.commit()
    await msg.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code.upper()} –Ω–∞ {amount} –º–æ–Ω–µ—Ç —Å–æ–∑–¥–∞–Ω.")

@dp.message(lambda m: True)
async def check_promo(msg: types.Message):
    user_id = msg.from_user.id
    code = msg.text.strip().upper()

    async with aiosqlite.connect(DB_NAME) as db:
        promo = await db.execute_fetchone("SELECT amount, activated FROM promo WHERE code = ?", (code,))
        if promo:
            if promo[1]:
                await msg.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            else:
                await db.execute("UPDATE promo SET activated = 1 WHERE code = ?", (code,))
                await db.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (promo[0], user_id))
                await db.commit()
                await msg.answer(f"üéâ –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –ø–æ–ª—É—á–∏–ª–∏ {promo[0]} –º–æ–Ω–µ—Ç!")
        else:
            await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.")

@dp.callback_query(lambda c: c.data == "check_sub")
async def recheck_subscription(callback: types.CallbackQuery):
    if await check_subscription(callback.from_user.id):
        await callback.message.delete()
        await callback.message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!", reply_markup=main_kb)
    else:
        await callback.answer("‚ùó –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.", show_alert=True)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


