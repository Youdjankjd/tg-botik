
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
import random
import aiosqlite

TOKEN = "7776073776:AAFFQldws5uyyMYG3ORAVanaazy41D5SZPE"
ADMIN_IDS = [6505085514]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_NAME = "bot.db"

async def init_db():
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            balance INTEGER DEFAULT 1000,
            inventory TEXT DEFAULT ''
        )
        """)
        await db.commit()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: Message):
    await add_user(message.from_user.id)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≠–∫–æ–Ω–æ–º –ë–æ—Ç! –¢—É—Ç –º–æ–∂–Ω–æ –∫—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É, —Å–æ–±–∏—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ. –ù–∞–ø–∏—à–∏ /menu")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(Command("menu"))
async def menu(message: Message):
    kb = [
        [types.KeyboardButton(text="üé∞ –ö–∞–∑–∏–Ω–æ")],
        [types.KeyboardButton(text="üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å")]
    ]
    await message.answer("üìã –ú–µ–Ω—é:", reply_markup=types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True))

# –ö–∞–∑–∏–Ω–æ —Ä—É–ª–µ—Ç–∫–∞
@dp.message(F.text == "üé∞ –ö–∞–∑–∏–Ω–æ")
async def casino(message: Message):
    uid = message.from_user.id
    balance = await get_balance(uid)
    if balance < 100:
        return await message.answer("üí∏ –£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç 100 –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏!")

    await update_balance(uid, -100)
    outcome = random.choices(["–í—ã–∏–≥—Ä—ã—à", "–ù–∏—á—å—è", "–ü—Ä–æ–∏–≥—Ä—ã—à"], [0.2, 0.3, 0.5])[0]

    if outcome == "–í—ã–∏–≥—Ä—ã—à":
        await update_balance(uid, 300)
        await message.answer("üéâ –¢—ã –≤—ã–∏–≥—Ä–∞–ª 300 –º–æ–Ω–µ—Ç!")
    elif outcome == "–ù–∏—á—å—è":
        await update_balance(uid, 100)
        await message.answer("üòê –ù–∏—á—å—è. –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.")
    else:
        await message.answer("üòµ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª 100 –º–æ–Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

# –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
@dp.message(F.text == "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å")
async def inventory(message: Message):
    uid = message.from_user.id
    inv = await get_inventory(uid)
    text = "üì¶ –¢–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç." if not inv else f"üéÅ –ü—Ä–µ–¥–º–µ—Ç—ã: {inv}"
    await message.answer(text)

# –ê–¥–º–∏–Ω–∫–∞
@dp.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –í—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã", callback_data="give_money")],
        [InlineKeyboardButton(text="üéÅ –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="give_item")]
    ])
    await message.answer("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def admin_buttons(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    if callback.data == "give_money":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
    elif callback.data == "give_item":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
    await callback.answer()

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã (–≤—ã–¥–∞—á–∞ –¥–µ–Ω–µ–≥ –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤)
@dp.message(F.text.regexp(r"^\d+\s+\w+"))
async def admin_give(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    try:
        uid, value = message.text.strip().split()
        uid = int(uid)
        if value.isdigit():
            await update_balance(uid, int(value))
            await message.answer(f"üí∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –≤—ã–¥–∞–Ω–æ {value} –º–æ–Ω–µ—Ç.")
        else:
            await add_item(uid, value)
            await message.answer(f"üéÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –≤—ã–¥–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {value}.")
    except:
        await message.answer("‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã.")

# === –ë–î —Ñ—É–Ω–∫—Ü–∏–∏ ===
async def add_user(user_id):
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("INSERT OR IGNORE INTO users(user_id) VALUES (?)", (user_id,))
        await db.commit()

async def get_balance(user_id):
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,)) as cursor:
            row = await cursor.fetchone()
            return row[0] if row else 0

async def update_balance(user_id, amount):
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
        await db.commit()

async def get_inventory(user_id):
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute("SELECT inventory FROM users WHERE user_id = ?", (user_id,)) as cursor:
            row = await cursor.fetchone()
            return row[0] if row else ""

async def add_item(user_id, item):
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute("SELECT inventory FROM users WHERE user_id = ?", (user_id,)) as cursor:
            row = await cursor.fetchone()
            inv = row[0] if row else ""
        new_inv = inv + ", " + item if inv else item
        await db.execute("UPDATE users SET inventory = ? WHERE user_id = ?", (new_inv, user_id))
        await db.commit()

# –ó–∞–ø—É—Å–∫
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
