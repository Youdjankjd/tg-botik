import asyncio
import random
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils import executor

TOKEN = "7558760680:AAHhhuACxlLgfkOwskeA5B9dzZ4GZp2uk8c"

bot = Bot(token=TOKEN)
dp = Dispatcher()

SHOP_ITEMS = {
    "–ë–∞–Ω–∞–Ω": 100,
    "–®–ª—è–ø–∞": 250,
    "–¢–æ—Å—Ç–µ—Ä": 500,
    "–ò–≥—Ä—É—à–µ—á–Ω—ã–π —Ç–∞–Ω–∫": 700,
    "–§–ª–µ—à–∫–∞": 1000,
    "–£—Ç–∫–∞": 1500,
    "–ö–∞–∫—Ç—É—Å": 2000,
    "–ö–æ–≤–µ—Ä": 3000,
    "–õ–∞–º–ø–∞": 5000,
    "–ö–æ—Ç –≤ –∫–æ—Ä–æ–±–∫–µ": 7500,
    "–ú–∏–∫—Ä–æ—Å–∫–æ–ø": 9000
}

@dp.message(commands=["start"])
async def start_handler(message: types.Message):
    async with aiosqlite.connect("db.sqlite3") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                balance INTEGER DEFAULT 0,
                last_spin INTEGER DEFAULT 0,
                inventory TEXT DEFAULT '',
                is_vip INTEGER DEFAULT 0,
                is_mod INTEGER DEFAULT 0
            )
        """)
        await db.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (message.from_user.id,))
        await db.commit()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É! üí∞\n–ò—Å–ø–æ–ª—å–∑—É–π /balance, /daily, /casino, /coinflip, /shop, /inventory")

@dp.message(commands=["balance"])
async def balance_handler(message: types.Message):
    async with aiosqlite.connect("db.sqlite3") as db:
        cursor = await db.execute("SELECT balance FROM users WHERE user_id = ?", (message.from_user.id,))
        row = await cursor.fetchone()
        await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {row[0]} –º–æ–Ω–µ—Ç")

@dp.message(commands=["daily"])
async def daily_handler(message: types.Message):
    async with aiosqlite.connect("db.sqlite3") as db:
        cursor = await db.execute("SELECT last_spin, balance FROM users WHERE user_id = ?", (message.from_user.id,))
        last_spin, balance = await cursor.fetchone()
        now = int(asyncio.get_event_loop().time())
        if now - last_spin >= 86400:
            amount = random.randint(500, 5000)
            await db.execute("UPDATE users SET balance = balance + ?, last_spin = ? WHERE user_id = ?", (amount, now, message.from_user.id))
            await db.commit()
            await message.answer(f"üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {amount} –º–æ–Ω–µ—Ç –∏–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä—É–ª–µ—Ç–∫–∏!")
        else:
            remaining = 86400 - (now - last_spin)
            await message.answer(f"‚è≥ –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ {int(remaining // 3600)}—á {int((remaining % 3600) // 60)}–º")

@dp.message(commands=["casino"])
async def casino_handler(message: types.Message):
    amount = random.randint(-1000, 2000)
    async with aiosqlite.connect("db.sqlite3") as db:
        await db.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, message.from_user.id))
        await db.commit()
    if amount >= 0:
        await message.answer(f"üé∞ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {amount} –º–æ–Ω–µ—Ç!")
    else:
        await message.answer(f"üí∏ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {-amount} –º–æ–Ω–µ—Ç.")

@dp.message(commands=["coinflip"])
async def coinflip_handler(message: types.Message):
    outcome = random.choice(["–û—Ä–µ–ª", "–†–µ—à–∫–∞"])
    win = random.choice([True, False])
    result = 1000 if win else -1000
    async with aiosqlite.connect("db.sqlite3") as db:
        await db.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (result, message.from_user.id))
        await db.commit()
    if win:
        await message.answer(f"ü™ô –í—ã–ø–∞–ª {outcome}. –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 1000 –º–æ–Ω–µ—Ç!")
    else:
        await message.answer(f"ü™ô –í—ã–ø–∞–ª {outcome}. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 1000 –º–æ–Ω–µ—Ç.")

@dp.message(commands=["shop"])
async def shop_handler(message: types.Message):
    text = "üõç –ú–∞–≥–∞–∑–∏–Ω —Ç–æ–≤–∞—Ä–æ–≤:\n"
    for name, price in SHOP_ITEMS.items():
        text += f"{name} - {price} –º–æ–Ω–µ—Ç\n"
    text += "\n–ù–∞–ø–∏—à–∏—Ç–µ /buy <–Ω–∞–∑–≤–∞–Ω–∏–µ> —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å."
    await message.answer(text)

@dp.message(commands=["buy"])
async def buy_handler(message: types.Message):
    args = message.text.split(" ", 1)
    if len(args) < 2:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞. –ü—Ä–∏–º–µ—Ä: /buy –ë–∞–Ω–∞–Ω")
    item = args[1].strip()
    if item not in SHOP_ITEMS:
        return await message.answer("–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ.")

    price = SHOP_ITEMS[item]
    async with aiosqlite.connect("db.sqlite3") as db:
        cursor = await db.execute("SELECT balance, inventory FROM users WHERE user_id = ?", (message.from_user.id,))
        balance, inventory = await cursor.fetchone()
        if balance < price:
            return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.")
        new_inventory = inventory + f",{item}" if inventory else item
        await db.execute("UPDATE users SET balance = ?, inventory = ? WHERE user_id = ?", (balance - price, new_inventory, message.from_user.id))
        await db.commit()
    await message.answer(f"‚úÖ –í—ã –∫—É–ø–∏–ª–∏: {item}")

@dp.message(commands=["inventory"])
async def inventory_handler(message: types.Message):
    async with aiosqlite.connect("db.sqlite3") as db:
        cursor = await db.execute("SELECT inventory FROM users WHERE user_id = ?", (message.from_user.id,))
        inventory = (await cursor.fetchone())[0]
        if not inventory:
            await message.answer("üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.")
        else:
            items = inventory.split(",")
            await message.answer("üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n" + "\n".join(items))

@dp.message(commands=["vip"])
async def vip_handler(message: types.Message):
    async with aiosqlite.connect("db.sqlite3") as db:
        cursor = await db.execute("SELECT balance, is_vip FROM users WHERE user_id = ?", (message.from_user.id,))
        balance, is_vip = await cursor.fetchone()
        if is_vip:
            return await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å VIP —Å—Ç–∞—Ç—É—Å.")
        if balance < 200000:
            return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ VIP (–Ω—É–∂–Ω–æ 200000).")
        await db.execute("UPDATE users SET balance = balance - 200000, is_vip = 1 WHERE user_id = ?", (message.from_user.id,))
        await db.commit()
    await message.answer("‚ú® –í—ã —Å—Ç–∞–ª–∏ VIP –∏–≥—Ä–æ–∫–æ–º!")

@dp.message(commands=["mod"])
async def mod_handler(message: types.Message):
    async with aiosqlite.connect("db.sqlite3") as db:
        cursor = await db.execute("SELECT balance, is_mod FROM users WHERE user_id = ?", (message.from_user.id,))
        balance, is_mod = await cursor.fetchone()
        if is_mod:
            return await message.answer("–í—ã —É–∂–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.")
        if balance < 10000000:
            return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –º–æ–¥–µ—Ä–∫–∏ (–Ω—É–∂–Ω–æ 10000000).")
        await db.execute("UPDATE users SET balance = balance - 10000000, is_mod = 1 WHERE user_id = ?", (message.from_user.id,))
        await db.commit()
    await message.answer("üõ° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!")

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)

