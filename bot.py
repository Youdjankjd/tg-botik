import asyncio
import random
import time
import aiosqlite
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest

TOKEN = "7558760680:AAHhhuACxlLgfkOwskeA5B9dzZ4GZp2uk8c"
CHANNEL_USERNAME = "economicbotlive"
ADMIN_IDS = [6505085514]
DB_NAME = "bot.db"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

main_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton(text="üé∞ –ö–∞–∑–∏–Ω–æ"), KeyboardButton(text="üéÅ –†—É–ª–µ—Ç–∫–∞")],
    [KeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω"), KeyboardButton(text="üíº –†–∞–±–æ—Ç–∞"), KeyboardButton(text="üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å")],
    [KeyboardButton(text="üëë –¢–û–ü"), KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")]
], resize_keyboard=True)

@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id

    try:
        member = await bot.get_chat_member(chat_id=f"@{CHANNEL_USERNAME}", user_id=user_id)
        if member.status in ("left", "kicked"):
            raise TelegramBadRequest("Not subscribed")
    except:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME}")],
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
        ])
        await message.answer("‚ùó –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.", reply_markup=markup)
        return

    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, balance INTEGER DEFAULT 0, vip INTEGER DEFAULT 0, mod INTEGER DEFAULT 0, referrer INTEGER, referrals INTEGER DEFAULT 0, last_daily INTEGER DEFAULT 0)")
        await db.execute("CREATE TABLE IF NOT EXISTS items (user_id INTEGER, item_name TEXT, amount INTEGER)")
        await db.execute("CREATE TABLE IF NOT EXISTS promocodes (code TEXT PRIMARY KEY, reward INTEGER)")
        await db.commit()

        user = await db.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        if not await user.fetchone():
            ref = message.text.split(" ")
            ref_id = int(ref[1]) if len(ref) > 1 and ref[1].isdigit() else None
            await db.execute("INSERT INTO users (user_id, referrer) VALUES (?, ?)", (user_id, ref_id))
            if ref_id:
                await db.execute("UPDATE users SET referrals = referrals + 1 WHERE user_id = ?", (ref_id,))
            await db.commit()
    await message.answer("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –±–æ—Ç!", reply_markup=main_kb)

@dp.callback_query(lambda c: c.data == "check_sub")
async def check_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        member = await bot.get_chat_member(chat_id=f"@{CHANNEL_USERNAME}", user_id=user_id)
        if member.status in ("left", "kicked"):
            raise Exception()
        await bot.send_message(user_id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ /start")
    except:
        await bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª!")


@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def balance(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_NAME) as db:
        user = await db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        balance = (await user.fetchone())[0]
    await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance} –º–æ–Ω–µ—Ç</b>")

@dp.message(F.text == "üé∞ –ö–∞–∑–∏–Ω–æ")
async def casino(message: Message):
    user_id = message.from_user.id
    bet = 100
    async with aiosqlite.connect(DB_NAME) as db:
        user = await db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,))
        row = await user.fetchone()
        if row is None or row[0] < bet:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
            return
        result = random.choice([True, False, False])
        if result:
            await db.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (bet, user_id))
            await message.answer("üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 100 –º–æ–Ω–µ—Ç!")
        else:
            await db.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (bet, user_id))
            await message.answer("üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 100 –º–æ–Ω–µ—Ç.")
        await db.commit()

@dp.message(F.text == "üéÅ –†—É–ª–µ—Ç–∫–∞")
async def daily(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_NAME) as db:
        row = await db.execute("SELECT last_daily FROM users WHERE user_id = ?", (user_id,))
        last = (await row.fetchone())[0]
        now = int(time.time())
        if now - last < 86400:
            remaining = 86400 - (now - last)
            await message.answer(f"‚è≥ –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ {remaining // 3600}—á {remaining % 3600 // 60}–º.")
            return
        reward = random.randint(50, 200)
        await db.execute("UPDATE users SET balance = balance + ?, last_daily = ? WHERE user_id = ?", (reward, now, user_id))
        await db.commit()
    await message.answer(f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} –º–æ–Ω–µ—Ç!")

@dp.message(F.text.startswith("/promo"))
async def promo(message: Message):
    parts = message.text.split(" ")
    if len(parts) < 2:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo –ö–û–î")
        return
    code = parts[1]
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_NAME) as db:
        result = await db.execute("SELECT reward FROM promocodes WHERE code = ?", (code,))
        data = await result.fetchone()
        if not data:
            await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        reward = data[0]
        await db.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (reward, user_id))
        await db.execute("DELETE FROM promocodes WHERE code = ?", (code,))
        await db.commit()
    await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} –º–æ–Ω–µ—Ç.")

@dp.message(F.text.startswith("/addpromo"))
async def add_promo(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    parts = message.text.split(" ")
    if len(parts) < 3:
        await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addpromo –ö–û–î –°–£–ú–ú–ê")
        return
    code = parts[1]
    try:
        reward = int(parts[2])
    except ValueError:
        return await message.answer("‚ùó –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("INSERT OR REPLACE INTO promocodes (code, reward) VALUES (?, ?)", (code, reward))
        await db.commit()
    await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} –Ω–∞ {reward} –º–æ–Ω–µ—Ç —Å–æ–∑–¥–∞–Ω.")


@dp.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")
async def referrals(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_NAME) as db:
        row = await db.execute("SELECT referrals FROM users WHERE user_id = ?", (user_id,))
        count = (await row.fetchone())[0]
    await message.answer(f"üë• –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞: https://t.me/{(await bot.me()).username}?start={user_id}")

@dp.message(F.text == "üëë –¢–û–ü")
async def top(message: Message):
    async with aiosqlite.connect(DB_NAME) as db:
        top_money = await db.execute("SELECT user_id, balance FROM users ORDER BY balance DESC LIMIT 5")
        top_ref = await db.execute("SELECT user_id, referrals FROM users ORDER BY referrals DESC LIMIT 5")
        money = await top_money.fetchall()
        refs = await top_ref.fetchall()
    msg = "üí∏ –¢–û–ü 5 –ø–æ –±–∞–ª–∞–Ω—Å—É:
"
    for i, (uid, bal) in enumerate(money, 1):
        msg += f"{i}. <a href='tg://user?id={uid}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> ‚Äî {bal} –º–æ–Ω–µ—Ç
"
    msg += "
üë• –¢–û–ü 5 –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:
"
    for i, (uid, r) in enumerate(refs, 1):
        msg += f"{i}. <a href='tg://user?id={uid}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> ‚Äî {r} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
"
    await message.answer(msg)

@dp.message(F.text == "üõí –ú–∞–≥–∞–∑–∏–Ω")
async def shop(message: Message):
    await message.answer("üõí –í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.")

@dp.message(F.text == "üíº –†–∞–±–æ—Ç–∞")
async def work(message: Message):
    earnings = random.randint(20, 100)
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (earnings, message.from_user.id))
        await db.commit()
    await message.answer(f"üíº –í—ã –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –∏ –ø–æ–ª—É—á–∏–ª–∏ {earnings} –º–æ–Ω–µ—Ç.")

@dp.message(F.text == "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å")
async def inventory(message: Message):
    user_id = message.from_user.id
    async with aiosqlite.connect(DB_NAME) as db:
        items = await db.execute("SELECT item_name, amount FROM items WHERE user_id = ?", (user_id,))
        data = await items.fetchall()
    if not data:
        await message.answer("üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç.")
    else:
        text = "üéí –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:
" + "
".join([f"{name} ‚Äî {amount} —à—Ç." for name, amount in data])
        await message.answer(text)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())



